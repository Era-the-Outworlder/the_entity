//******************************************************************************
// SHIORI/3.0 Control Script for YAYA
// Compatibility processing
// English Translation <3 Era 2021
//******************************************************************************

// aya5.dll setting (old)
#globaldefine	AYAINFO_VERSION	0
#globaldefine	AYAINFO_CHARSET	1
#globaldefine	AYAINFO_PATH	2
#globaldefine	AYAINFO_NAME	3
#globaldefine	AYAINFO_AUTHOR	4

// Completion of system functions to maintain old compatibility (those that can be supported only by replacement)
#globaldefine	SETSEPARATOR	SETDELIM
#globaldefine	TONUMBER2		TOINT
#globaldefine	TOSTRING2		TOSTR
#globaldefine	TONUMBER		CVINT
#globaldefine	TOSTRING		CVSTR
#globaldefine	ISFUNCTION		ISFUNC
#globaldefine	BINSTRTONUM		BINSTRTOI
#globaldefine	HEXSTRTONUM		HEXSTRTOI
#globaldefine	ERASEVARIABLE	ERASEVAR
#globaldefine	MSTRLEN			STRLEN
#globaldefine	MSTRSTR			STRSTR
#globaldefine	MSUBSTR			SUBSTR
#globaldefine	MERASE			ERASE
#globaldefine	MINSERT			INSERT
#globaldefine	NAMETOVALUE		EVAL
#globaldefine	CALLBYNAME		EVAL

//******************************************************************************
// Statement Version 4 System function / system variable complement
// Generic function
//******************************************************************************

ASC
{
	if !_argc;                              " "
	elseif GETTYPE(_argv[0]) != 1;          " "
	elseif _argv[0] < 0 || _argv[0] > 0x7f; " "
	else;                                   CHR(_argv[0])
}

//----

IASC
{
	if !_argc;                     -1
	elseif GETTYPE(_argv[0]) != 3; -1
	elseif !STRLEN(_argv[0]);      -1
	else;                          CHRCODE(_argv[0])
}

//----

ISINSIDE
{
	if _argc < 3;                                             0
	elseif  (_argv[1] <= _argv[0] && _argv[0] <= _argv[2]) ||/
			(_argv[2] <= _argv[0] && _argv[0] <= _argv[1]);   1
	else;                                                     0
}

//----

ISREAL
{
	if !_argc;                     0
	elseif GETTYPE(_argv[0]) == 2; 1
	else;                          0
}

//----

ISINTEGER
{
	if !_argc;                     0
	elseif GETTYPE(_argv[0]) == 1; 1
	else;                          0
}


//******************************************************************************
// Statement Version 4 System function / system variable complement
// REQ function
//******************************************************************************

//----

REQ.KEY
{
	if !_argc; return

	switch GETTYPE(_i = _argv[0]) {
		// Error
		""

		// Position specification
		var.req.key[_i];

		// Position specification (real number) Integerize and process
		var.req.key[TOINT(_i)]

		// String error
		""
	}
}

//----

REQ.HEADER
{
	REQ.KEY(_argv)
}

//----

REQ.VALUE
{
	if !_argc; return

	switch GETTYPE(_i = _argv[0]) {
		// Error
		""

		// Position Specification
		var.req.value[_i];

		// Position Specification(real number) processed as an integer
		var.req.value[TOINT(_i)]

		// Naming
		{
			_sz = ARRAYSIZE(var.req.key)
			for _j = 0; _j < _sz; _j++ {
				if (var.req.key[_j] == _i) {
					var.req.value[_j]
					break
				}
			}
		}
	}
}

//******************************************************************************
// statement version 4 system function / system variable completion
//LIB system functions
//******************************************************************************
LIB.KEY
{
	if !_argc; return

	switch GETTYPE(_i = _argv[0]) {
		// Error
		""

		// Position Specification
		var.lib.key[_i];

		// Position Specification(real number) processed as an integer
		var.lib.key[TOINT(_i)]

		// String Error
		""
	}
}

//----

LIB.HEADER
{
	LIB.KEY(_argv)
}

//----

LIB.VALUE
{
	if !_argc; return

	switch GETTYPE(_i = _argv[0]) {
		// Error
		""

		// Position Specification
		var.lib.value[_i];

		// Position Specification(real number) processed as an integer
		var.lib.value[TOINT(_i)]

		// Naming
		{
			_sz = ARRAYSIZE(var.lib.key)
			for _j = 0; _j < _sz; _j++ {
				if (var.lib.key[_j] == _i) {
					var.lib.value[_j]
					break
				}
			}
		}
	}
}



//******************************************************************************
// Variable/Function completion for statements version 4 and earlier
//******************************************************************************
restore_old_variables
{
    // ascii
    ascii = IARRAY
    for _i = 0; _i <= 0x7f; _i++ {
        ascii ,= CHR(_i)
    }
}
