//-------Etcetera--Miscellaneous Functions--------
//There are a lot of different functions in this file.
//I don't know exactly how all of them work yet, or whether I could improve them.
//I'll probably separate out any functions I write myself from the ones in here.
//<3 Era
OnNotifyUserInfo
{
	menuNName = reference0
	menuRName = reference1
	menuBYear = SUBSTR(reference2,0,4)
	menuBMonth = SUBSTR(reference2,5,2)
	menuBDay = SUBSTR(reference2,8,2)
}
	
	
OnDiscordPluginCustom 
{
	"Connecting to Discord Rich Presence"
	--

'\![raiseplugin,Discord Rich Presence,OnDiscordPluginCustomALL,'
--
''//Appid
--
'What,'//CustomDetail
--
'How'//CustomState
--
''//LargeImageKey
--
'Gaze'//LargeImageText
--
/*
'simple_hollow_red_heart,'//SmallImageKey
--
'Developer'//SmallImageText
--
*/
']'
}
OnDiscordPluginCustomEnd
{
	 "Disonnecting from Discord Rich Presence"
}



OnFileDrop2
{
	_filepath = SPLITPATH(reference0)
	_filename = _filepath[2]
	_fileext = TOLOWER(_filepath[3])
	case _fileext
	{
		//These are the formats your ghost will recognize as image files to set as the background. .png does not work.
		when ".jpg", ".jpeg", ".bmp", ".gif"
		{
			Wallpaperfile = reference0
			
			"\0\s[0]\_v[trill.wav]Would you like me to set this as your wallpaper?\n\n[half]/
			\q[Centered,SetWallpaper_0]\n/
			\q[Tiled,SetWallpaper_1]\n/
			\q[Stretched,SetWallpaper_2]\n\n[half]/
			\q[No thanks,SetWallpaper_Cancel]\e"
		}
		//Audio file formats
		when ".mid", ".wav", ".mp3", ".wma", ".au", ".ogg"
		{
			"\0\s[0]\_v[trill.wav]%(_filename)%(_fileext) is music.\e"
		}
		//Any other file format. 
		others
		{
			"\0\s[0]\_v[trill.wav]That is %(_filename)%(_fileext).\e"
		}
	}
}

//This set of options sets the wallpaper up.

Select.SetWallpaper_0
{
	"\![set,wallpaper,%(Wallpaperfile),center]\0\s[0]\_v[trill.wav]I have centered the image\e"
}
Select.SetWallpaper_1
{
	"\![set,wallpaper,%(Wallpaperfile),tile]\0\s[0]\_v[trill.wav]I have tiled the image.\e"
}
Select.SetWallpaper_2
{
	"\![set,wallpaper,%(Wallpaperfile),stretch]\0\s[0]\_v[trill.wav]I have stretched the image.\e"
}
Select.SetWallpaper_Cancel
{
	"\0\s[0]\_v[trill.wav]That's fine, you know what to do if you change your mind, %(username).\e"
}

//---- OnInstallBegin --------------
//OnInstallBegin is called when a file with an included install.txt is dropped on the ghost. 
 
OnInstallBegin
{
	"\0\s[0]\_v[trill.wav] This contains an install.txt file. I will begin immediately.\e"
}

//---- OnInstallComplete --------------
//OnInstallComplete runs once the file above has finished installing.
 
OnInstallComplete
{
	"\0"
 	--
	
	if reference0 == "shell"
 	{	
		_shellname = TOLOWER(reference1)
		if "gaze" _in_ _shellname
		{
		"\s[0]\_v[trill.wav]Ah. A new variant of myself? Interesting.\e"
		}
		else
		{
		"\s[0]\_v[trill.wav]Ahhh, %(reference1). How exciting for its intended recipient.\e"
		}
 	}
	//if the type of the file they're installing is a ghost. %(reference1)here would be the name of the ghost.
	elseif reference0 == "ghost"
 	{
		"\s[0]\_v[trill.wav]A new ghost.\w8 Welcome, %(reference1).\e" 
 	}
	//if the type of file is a balloon. %(reference1) here would be the name of the balloon.
	elseif reference0 == "balloon"
 	{
		"\s[0]\_v[trill.wav]Ooooh, new ballons. How exciting.\e"	
 	}
	//if the type of file is a plug-in, like a saori of some kind. %(reference1) here would be the name of the plug-in.
	elseif reference0 == "plugin"
 	{
		"\s[0]\_v[trill.wav]Installed plug-in %(reference1). I cannot wait to see what you will do with it, %(username)\e"
		
 	}
}

//---- OnInstallFailure --------------
//If the file you dropped fails to install for one reason or another.

OnInstallFailure
{
	//this first bit of dialogue begins the explanation of what happened. 
	"\0\s[0]\_v[trill.wav]Installation failed. \n\n[half]"
	--
	//These if statements determine how it happened to finish the piece of dialogue. This checks if the reason it failed is because it was unsupported.
	if reference0 == "unsupported"
	{
	"\s[0]\_v[trill.wav]This file is unsupported.\w5\s[0]\e"
	}	
	//This checks if the file didn't extract properly.
	elseif reference0 == "extraction"
	{
	"\s[0]\_v[trill.wav]The extraction failed.\w5\s[0]\e"
	}
}
 
//----OnInstallRefuse----
//If the file you dropped can't be installed with this ghost.
 
OnInstallRefuse
{
	//reference0 in this function refers to the ghost this file is associated with, probably the name of the ghost listed in its install.txt file.
	"\0\s[0]\_v[trill.wav]This seems to be intended for %(reference0).\nTry giving it to them instead.\w8\s[0]\e"	
}



//**** Uninstallation ******************************************
//Controls for uninstalling ghosts through the program.

//----OnVanishSelecting----
//When you select the uninstall option in the menu.

OnVanishSelecting
{
	if reference0 == "Gaze"
	{
		"\0\s[0]\_v[trill.wav]You wish to uninstall me, %(username)?\w8\w8\e"
	}
	else
	{
		"\0\s[0]\_v[trill.wav]You wish to uninstall %(reference0)? \w8\s[0]\e"
	}	
}

//----OnVanishSelected----
//When you decide to uninstall them. 

OnVanishSelected
{
	if reference0 == "Gaze"
	{
		"\0\s[0]\_v[trill.wav]Farewell, %(username)?\w8\w8\e"
	}
	else
	{
		"\0\s[0]\_v[trill.wav]Farewell, %(reference0)? \w8\s[0]\e"
	}
}


//----OnVanishCancel----
//If you select Uninstall from the menu, but decide not to do it.

OnVanishCancel
{
	if reference0 == "Gaze"
	{
		"\0\s[0]\_v[trill.wav]Thank you, %(username)?\w8\w8\e"
	}
	else
	{
		"\0\s[0]\_v[trill.wav]You did the right thing. \w8\s[0]\e"
	}
}

//----TalkVanishButtonHold----
//I believe this calls if you click and hold the button on either the menu option for uninstalling them, or possibly the option itself. Be careful if you're trying to test this! You'd hate to uninstall all your hard work, right? I'd probably just make sure the dialogue looks right via Script Input and leave it at that.

TalkVanishButtonHold
{
	"\0\s[0] ...\8\w8\8\w8\8\w8\e"
}


//---- OnVanished -----------------------------------------
//OnVanished is a weird little function. Basically, if you uninstall a ghost, it'll automatically go back to the last ghost you were using. They'll then say this line of dialogue about the ghost you just uninstalled. This is very annoying to test as you can imagine! But unlikely to come up super often, I bet. You might as well be thorough and fill this out as well. Make sure to set up both their poses immediately so they both appear when it switches back to them.
 
OnVanished
{
	"\0\s[0]\1\[10] What a shame...\w8\w8\w8\w8e"
}

OnOtherGhostVanished
{
	"\0\s[0]Oh... Somehow I failed to see that coming. \nFarewell, %(reference0)."
}

//**** Mail Checking *******************************************************************
//The next set of functions have to do with checking your email. This function is a slippery little thing - I've had people test it following my directions and have it work, but I've never actually gotten it to report back the right amount of emails myself. Very frustrating. But perhaps you'll have more luck with it, haha.


//*********************Advanced User Info*******************************
//These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. Also for my own reference in the future since I plan on using this template too, haha. If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.

//If you want to set up your ghost to check your mail so you can more easily check these messages instead of just writing the dialogue and moving on, it's a little bit tricky, but not super hard.
//Basically, you're going to need to find your POP settings for your email account. Googling your provider + POP should bring it up pretty quick. Once you have the info, you'll go to the right click menu, options, then preferences. A big menu should pop up, and you should see POP in the left side. Click that, and input all the info from the POP page you looked up for your account. Tell your ghost to check your email, and if it works, then congratulations!
//***********************************************************************


//---- OnBIFFBegin -------
//When you first tell the ghost to check your email. An intro statement, if you will. Replace with whatever you like.
 
OnBIFFBegin
{
	"\0\s[0]\_v[trill.wav]Checking your email now. \w8\w8\w8\e"	
}

 
//---- OnBIFFComplete -------
//After they've succeeded in checking your mail, they'll report back with how many new emails you have. Replace the dialogue with whatever would be character appropriate.
 
OnBIFFComplete
{
	//If you have no new mail.
	if reference0 == 0
 	{
		"\0\s[0]\_v[trill.wav]You have no new emails. \w8\w8\w8\e"
	}
	//If you have one new email.
	elseif reference0 == 1
 	{
		"\0\s[0]\_v[trill.wav]You have one new email. \w8\w8\w8\e"
	}
	//For any other number of emails.
 	else
	{
		"\0\s[0]\_v[trill.wav]You have %(reference0) new emails. \w8\w8\w8\e"
 	}
}

//---- OnBIFFFailure -------
//Various error messages that can happen when your ghost tries to connect to an email account. Replace the dialogue as appropriate.
 
OnBIFFFailure
{
	//If the connection times out.
	if reference0 == "timeout"
 	{
		"\0\s[0]\_v[trill.wav]The connection timed out. \w8\w8\w8\e"
	}
	//If the account blocks the ghost from accessing it. I think gmail may do this at first to try and protect your account from unapproved applications using it. It gives you the option to change the setting in the warning email they send you about it.
 	elseif reference0 == "kick"
	{
		"\0\s[0]\_v[trill.wav]Access has been denied.\n Please check the security settings of your email host.\w8\w8\w8\e"
 	}
	//If the information put into the POP menu is wrong. Note that this ends with \![open,configurationdialog]. This will open up the preferences menu
	elseif reference0 == "defect"
 	{
		"\0\s[0]\_v[trill.wav]Login failed. You should check your POP settings. \w8\w8\w8\![open,configurationdialog]\e"
	}
	//if there's some other kind of error. reference0 here stores the error message the email server would have given the ghost, hopefully
 	else
	{
		"\0\s[0]\_v[trill.wav]Attempt failed. Error %(reference[0]) returned.\w8\w8\w8\e"
 	}
}


//**** Network Update *****************************************************************
//The following functions are for the Network Update of your ghost, where it will connect to your website, check for new files, and update itself. This is a handy feature, but tricky to set up. If you have no intention of using Network Update, you can disregard these, but it won't hurt to fill them out anyway just in case. More details about how to set up Network Update are in the walkthrough (http://www.ashido.com/ukagaka/walkthrough.html).
 
//Replace the dialogue in the next set of functions as appropriate. You can easily test these messages using the Developer panel. Go to Open at the bottom of it and choose one of the four Update Event options to simulate a Ghost's update process. I highly recommend doing this at LEAST once if you're going to use this feature to make sure it flows well.
 
//---- OnUpdateBegin -----
//When you first tell your ghost to update. An introductory statement, like OnBIFFBegin above. Replace or add more dialogue as appropriate. Note that they end with \w8 to give a little breather time.
 
OnUpdateBegin
{
	"\0\s[0]\_v[trill.wav]Checking for updates now. \w8\w8\w8\e"
}


//---- OnUpdateReady ----------------
//If the ghost finds new files to update with.
 
OnUpdateReady
{
	"\0\s[0]\_v[trill.wav]%(reference[0]) new files available for update.\w8\w8\w8\e"
}


//---- OnUpdateComplete -----
//When the ghost has finished the update process.

OnUpdateComplete
{
	//if the ghost had nothing to update with
	if reference0 == "none"
 	{
 		"\0\s[0]\_v[trill.wav]There are no updates available. \w8\w8\w8\e"	
	}
	//if the ghost has updated successfully
 	else
	{
		"\0\s[0]\_v[trill.wav]Update completed successfully. View Changelog? \n\q[Yes,OnChangeLog]----\q[No,NoChangelog]\w8\w8\w8\e"
 	}
}
OnGhostVer
{
	"1.0.0"
}

OnChangeLog
{
	"\![set,autoscroll,disable]\_q\b2\_l[90]\n/
	-Version 1.0.0-\n\n/
	-Initial release\n\n\n"
	--
	if reference0 == "menu" || reference1 == "menu" //Checks to see if the user came here from the functions menu
	{
		"\![*]\q[Back to Functions,OnFunctionMenu]\n"
	}
	--
	"\![*]\q[Done,cancelnodialogue]\e"
}

Select.NoChangelog
{
	"\0\s[0]Ok,\w4 you can see it in the functions menu later if you want!\e"
}
//---- OnUpdateFailure -----
//Error messages if the update process fails in some way.
 
OnUpdateFailure
{
	//if the connection times out
	if reference0 == "timeout"
 	{
		"\0\s[0]\_v[trill.wav]The update failed because the connection timed out. \w8\w8\w8\e"
	}
	//This is if the files don't match properly to updates.dau, I think. For example, if a file only partially transferred or somehow got corrupted. This may also come up if you didn't set up the directory and updates.dau properly as outlined on the walkthrough page.
 	elseif reference0 == "md5 miss"
	{
		"\0\s[7]\_v[trill.wav]Unable to update. MD5 hash check failed. \w8\w8\w8\e"
 	}
	//for other errors
	else
 	{
		"\0\s[0]\_v[trill.wav]Update failed. Error %(reference[0]) returned.\w8\w8\w8\e"
	}
}


//---- OnUpdate.OnDownloadBegin ------------------------------------------------
//This dialogue plays when they begin downloading a new file. WARNING: if you have big plans for your ghost and are going to make a lot of new image files for it (like... i do, cough) at some point, you're going to want to make these messages very brief, if you even have them at all. The reason is because the user will see these messages for EVERY individual file that they have to download, and if you have, say, 50 pna files in the queue, they will see this dialogue 50 times. Not only that, but displaying the dialogue takes some time, so it also extends the download process.
//If you aren't planning on adding a ton of files at any point, or are only intending to update the .dic files which will be at most a handful of files, then you can go ahead and put a short message in here. But if your ghost is going to grow in leaps and bounds as you work on it, try and keep these messages as brief as possible to make the process that much faster for your user.
 
OnUpdate.OnDownloadBegin
{
	//this is checking to see what kind of files are being downloaded. In this case, it's looking for files called aitalk in the download queue. If you want to have a specialized bit of dialogue for each type of file, you can expand this with elseifs and by replacing aitalk with whatever file you have in mind. Keep in mind my warning above though.
 	if "aitalk" _in_ reference0
 	{
		"\0\s[0]I am downloading new dialogue. \w8\w8\w8\e"
 	}
	//for files not specified above
 	else
 	{
		"\0\s[0]Downloading new data. \w8\w8\w8\e"
	}
}

//---- OnUpdate.OnMD5CompareBegin ----------
//This checks the hash value of the files in the directory and the files listed in updates.dau, I believe. It will do this for every file the user downloads, so I again remind you of my warning above! For every file they download, they will have to go through three sets of unique dialogue, and it can get old fast. Not to mention it slows things down a lot. Again, I would recommend keeping this very brief, if not just replacing it with "..." instead.
 
OnUpdate.OnMD5CompareBegin
{
	"\0\s[0]Checking the MD5 value.\e"
}

//---- OnUpdate.OnMD5CompareComplete ---------
//After they've checked the MD5 value and it matches. See above about the length of this message.
 
OnUpdate.OnMD5CompareComplete
{
	"\0\s[0]MD5 check good.\e"
}

//---- OnUpdate.OnMD5CompareFailure ----------
//If the MD5 values don't match. If you follow my Network Update directions carefully, this shouldn't come up very often, but don't be surprised if you run into it every now and then by forgetting a file here or there.
 
OnUpdate.OnMD5CompareFailure
{
	"\0\s[0]The MD5 values don't match.\w8\e"
}

 
 
//**** Headlines and RSS Feeds *********************************************************
//This section has to do with the RSS feeds option on your ghost. If you drag and drop a url on them, they'll add it to a list you can access via the right-click menu, and they'll tell you the last set of updates for the site. This works best with RSS feeds I think, but you can experiment with other sites to see how it works.
//The headlines you see under the tab are in the headline folder under your base SSP install. So it'd be SSP\headlines. You should see the folders for each linked headline in there. I've very rarely ever messed with them or used them. Likewise, your RSS feeds you've added will be under SSP\rss and I don't think that option will appear in the headlines/RSS tab until you add an RSS feed to a ghost. If you want to clear your RSS feeds or headlines, just delete either of those two folders.
 

//---- OnHeadlinesenseBegin ------------------
//This dialogue comes up when you select something in your RSS feed as an intro, like the other On[Thing]Begin things we've seen so far. Replace as you need.
 
OnHeadlinesenseBegin
{
	"\0\s[0]\_v[trill.wav]%(reference0) Selected.\e"
}

//---- OnHeadlinesense.OnFind ---------------
//This actually displays the feed. My set-up for it is pretty simple but gets the job done, it just has the name of the feed, a line space, then a list of links. You shouldn't have to edit any of these and I probably wouldn't honestly.
 
OnHeadlinesense.OnFind
{
	//----  What page You're on
 	if reference2 == "First" || reference2 == "First and Last"
	{
 		//---- First page
		"\0\b2\s[0]%(reference0):"
 	}
	elseif reference2 == "Next"
 	{
		//---- Second page
 		"\0\b2\s[0]%(reference0):"
	}
 	elseif reference2 == "Last"
	{
 		//---- Last page
		"\0\b2\s[0]%(reference0):"
 	}
	--
 	//---- Headlines
	"\n\n%reference3\n"
 	--
	//---- Pages
 	if reference2 == "First" || reference2 == "Next"
	{
 		//---- Bottom buttons
		"\![*]\q[Next,] - \![*]\q [Stop,Headline_Cancel]\e"
 	}
	else
 	{
		//---- Bottom buttons
 		"\![*] \q[Stop,Headline_Cancel]\e"
 	}
	
}


Select.Headline_Cancel
{
	"\0\s[0]\_v[trill.wav]DONE. \w8\w8\w8\e"	
}

//---- OnHeadlinesenseComplete --------------
//This is an odd function. As far as I can gather, this is if the headline information gathering was successful, but there's no new information to report. Possibly if none of the feeds have updated? I'm a little fuzzy on this one.
 
OnHeadlinesenseComplete
{
	"\0\s[0]\_v[trill.wav]DONE. %(reference0)\w8\w8\w8\e"
}

//---- OnHeadlinesenseFailure ----------------
//This one is more clearly for when the ghost can't get the information it needs about the RSS feed in question.
 
OnHeadlinesenseFailure
{
	"\0\s[0]\_v[trill.wav]FAILURE. \w8\n\n[half]"
	--
	//if they can't download the rss feed for some reason
	if reference0 == "can't download"
	{
		"\_v[trill.wav]Unable to download.\w8\w8\s[0]"
	}
	//if they can't read the file for some reason
	elseif reference0 == "can't analyze"
	{
		"\_v[trill.wav]Unable to analyze.\w8\s[0]"
	}
	else//other errors
	{
		"\_v[trill.wav]Error: %(reference0)\w8\s[0]"
	}
	--
		"\e"//And here is the final /e, so you don't need to include it in the if statements above. Another one of the very rare cases this occurs.
	
}


//**** Ghost Creation and Updating ******************************************************
//These next few are related to creating updates2.dau and .nar files for your ghosts. You'll want to at least make a .nar to distribute your ghost, and if you're going to be using Network Update, you'll also want to make updates2.dau as well. It's unlikely that anyone other than you will see these messages, but you should be thorough and replace them anyway.
//Primarily, you will see these messages when you're creating your updates file or updating your ghost.nar file. More on this on the walkthrough page. However, you could potentially drag and drop another ghost's folder onto them, and they'll also create a nar for that as well, though I've never done that myself. I really wouldn't mess around too much with this. Just follow the directions on the walkthrough page and fill out the dialogue here as required.


//---- OnUpdatedataCreating ------------------
//This will begin the creation of the updates2.dau file. Not unlike the other beginning functions you've seen throughout this file. Replace with whatever you like.
 
OnUpdatedataCreating
{
	"\0\s[0]\_v[trill.wav]Now generating updates2.dau file. \w8\w8\w8\e"
}

//---- OnUpdatedataCreated -----
//After the updates2.dau file has been successfully created. Replace with whatever.
 
OnUpdatedataCreated
{
	"\0\s[0]\_v[trill.wav]Done.\w8\w8\w8\e"
}

//---- OnNarCreating ----------
//Along the same lines, this is when they begin creating a .nar file for your ghost. .nars are the format most ghosts will be in, something similar to a .zip file, and this is the format you'll be distributing your ghost in most likely. Replace the dialogue with whatever you like.
 
OnNarCreating
{
	"\0\s[0]\_v[trill.wav]Creating .nar file. \w8\w8\w8\e"
}

//---- OnNarCreated -----------
//After the nar file has been successfully created.
 
OnNarCreated
{
	"\0\s[0]\_v[trill.wav]%(reference0) created. \w8\w8\w8\e"
}

//****　Clock Synchronization　**********************************************************
//**** 미카 (http://homepage2.nifty.com/ko-ki/)의 사전을 참고했습니다．감사＞こ 나무 성
//This set of functions was done by the above Korean coder, I think. I'll leave their comment there untouched. 
//If you right click your ghost and go into the Utilities menu, there's an option called NTP Time Sync. That's what this is for!
 

//----OnSNTPBegin ----------
//As with the others you've seen above, this is the beginning bit of dialogue for this process.
	//%(reference0) here is the site they'll be using to check your clock.
 
OnSNTPBegin
{
	"\0\s[0]\_v[trill.wav]Checking time now.\w8\e"
}


//----　OnSNTPCompare-----------------
//Now the ghost is going to compare the current time of your computer's system to the time of the site they connected to. Most of this you don't have to touch, just replace the dialogue as indicated.
 
OnSNTPCompare
{
 	"Retrieved Time: %reference1[1]/%reference1[2]/%reference1[0] %reference1[3]:%reference1[4]:%reference1[5]\w2\n/
	Your Time: %reference2[1]/%reference2[2]/%reference2[0] %reference2[3]:%reference2[4]:%reference2[5]\w2\n/
 	\n"
	--
	//if your clock is already accurate.
 	if reference3 == 0
	{
		"\0\s[0]\_v[trill.wav]The time is correct. \w8\e"
	}
	//if your clock doesn't match
 	else
	{
		"\0\s[0]\_v[trill.wav]The system clock is incorrect.\nShall I correct it?\n\n[half]/
		\![*] \q[Correct it,OnSNTPEXECUTE]\n/
 		\![*] \q[Leave it,OnSNTPCANCEL]\e"
	}
}

//----　OnSNTPEXECUTE ----------
//After they've fixed your clock. Replace with what you want.
 
OnSNTPEXECUTE
{
	"\0\s[0]\_v[trill.wav]The time is now correct. \w8\e"
}

//----　OnSNTPCANCEL ----------
//If you decide not to change your clock when they tell you it doesn't match. Replace with what you want.
 
OnSNTPCANCEL
{
	"\0\s[0]\_v[trill.wav]It's not my place to tell you that you cannot be wrong.\w8\e"
}

//----　OnSNTPFailure ----------
//If they can't change the clock for some reason, possibly because the site timed out but it could be anything. Replace with what you want.
 
OnSNTPFailure
{
	"\0\s[0]\_v[trill.wav]I tried but was unsuccessful. \w8\e"
}


//--OnDisplayChange--------
//This is when you change the resolution of your monitor while your ghost is running. Don't mess with any of this, it should be fine as is.
 
OnDisplayChange
{
	displaybpp    = reference0
 	displaywidth  = reference1
	displayheight = reference2
}



//---- OnScreenSaverStart --------------
//This happens if your ghost is running when your screensaver starts up. This and OnScreenSaverEnd are optional, you can delete them both if you like. In fact, you can just delete the rest of the functions from this point on if you're tired and lazy, but we're close to the end, so don't give up yet!
 
OnScreenSaverStart
{
	"\0\s[0]\_v[trill.wav]Ha... ha... \w8\e"
	"\0\s[0]\_v[trill.wav]The world has gone strange... \w8\e"
}

//---- OnScreenSaverEnd --------------
//When you wiggle your mouse and stop your screensaver.
 
OnScreenSaverEnd
{
	"\0\s[0]\_v[trill.wav]It is over... good. \w8\e"
}


//---- OnApplicationBoot -------
//This supposedly is for when a program starts but I have honestly never gotten it to work or seen it happen. I wouldn't sweat these three related functions too much.
 
OnApplicationBoot
{
	"\0\s[0]\_v[trill.wav]%(reference0) started. \w8\e"
}

//---- OnApplicationClose ------
//See above, but for the program closing.
 
OnApplicationClose
{
	"\0\s[0]\_v[trill.wav]%(reference0) closed. \w8\e"
}

//---- OnApplicationFileOpen -----------------
//I believe this is for when the program detailed above opens a document file of some kind.
 
OnApplicationFileOpen
{
	"\0\s[0]\_v[trill.wav]Opening %(reference0). \w8\e"
}




//---- OnBatteryLow ---------
//This is for when your laptop's battery is low. I don't have a laptop, so I've never really been able to test this. Perhaps someone with a laptop can report back to me with more details about the battery related functions?
 
OnBatteryLow
{
	"\0\s[0]\_v[trill.wav]Your battery is at %(reference0)% charge. \nSave your work so that you do no lose your progress. \w8\e"
}
 
//--OnBatteryCritical---------
//Likewise, this is for if your battery is REALLY low. Replace as you like.
 
OnBatteryCritical
{
	"\0\s[0]\_v[trill.wav]Power critical. Please plug in your computer. \w8\e"
}
 
//--OnBatteryNotify------------
//This I believe checks to see if your laptop is plugged in or not. Originally this bit of code was commented out, so I suspect it may not work. It may need a plug-in of some sort. Either way, you can delete it or fill it out as you like.
//Actually investigating this, leaving this in makes it so the ghost updates you about whether or not your computer is plugged-in constantly, which makes no sense for desktops. No doubt why it was commented out. Just leave it be.

/*
OnBatteryNotify
{
	if reference2 == "online"//If your laptop is plugged in
	{
		"\0\s[0]\_v[trill.wav]The laptop is plugged in.\e"
	}
	elseif reference2 == "offline"//If you unplug your laptop
	{
		"\0\s[0]\_v[trill.wav]Watch your battery.\e"
	}
}
*/


//---- OnSysResourceLow ------------------
//A notification for if your system resources are low. I've never seen this happen and my system resources can run pretty low sometimes (woo windows xp woooo), so I suspect this one also may not work without the right plug-in, but I could be wrong. You might as well fill it out.
 
OnSysResourceLow
{
	"\0\s[0]\_v[trill.wav]The system resources are low.\w8\e"
}


//--OnShellScaling
//This is a function however that you may actually use! Or at least, I often use it when desktop space is at a premium (which it always is on my computer). If you right click the ghost, you can go to Shell Scaling, which lists a number of different percentages. Those are the percentages your ghost can be scaled in size up or down. You can try them out yourself to get an idea of what I mean. I often scale mine down to get them out of the way sometimes. This adds dialogue whenever you change their scale. You don't have to do this if you don't want to, in which case they will just stay silent when you size them up or down. If that's what you want, just delete the whole thing.
 
OnShellScaling
{
	//this number is the percentage that you're scaling the ghost up to. In this case, it's 150%.
	if reference0 == 150
	{
		"\0\s[0]\_v[trill.wav]Half-again my natural state\e"
	}
	elseif reference0 == 100
	{
		"\0\s[0]\_v[trill.wav]Normality.\e"
		"\0\s[0]\_v[trill.wav]Ahhh... this is better. \w8\e"
	}
	elseif reference0 == 50
	{
		"\0\s[0]\_v[trill.wav]Half-sized.\w8\w8\s[0]\e"
	}
	else
	{
		"\0\s[0]\_v[trill.wav]%(reference0)%\w8\w8\s[0]\e"
	}
}